// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Image Analysis Flow
 *
 * This file defines a Genkit flow to analyze an image and identify key objects, scenes, and emotions.
 * It exports the AnalyzeImageInput and AnalyzeImageOutput types, as well as the analyzeImage function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const AnalyzeImageInputSchema = z.object({
  photoUrl: z.string().describe('The URL of the image to analyze.'),
});
export type AnalyzeImageInput = z.infer<typeof AnalyzeImageInputSchema>;

const AnalyzeImageOutputSchema = z.object({
  objects: z.array(z.string()).describe('A list of key objects identified in the image.'),
  scenes: z.array(z.string()).describe('A list of scenes identified in the image.'),
  emotions: z.array(z.string()).describe('A list of emotions evoked by the image.'),
});
export type AnalyzeImageOutput = z.infer<typeof AnalyzeImageOutputSchema>;

export async function analyzeImage(input: AnalyzeImageInput): Promise<AnalyzeImageOutput> {
  try {
    return analyzeImageFlow(input);
  } catch (error) {
    console.error('Error in analyzeImage:', error);
    throw error; // Re-throw the error to be caught by the caller
  }
}

const analyzeImagePrompt = ai.definePrompt({
  name: 'analyzeImagePrompt',
  input: {
    schema: z.object({
      photoUrl: z.string().describe('The URL of the image to analyze.'),
    }),
  },
  output: {
    schema: z.object({
      objects: z.array(z.string()).describe('A list of key objects identified in the image.'),
      scenes: z.array(z.string()).describe('A list of scenes identified in the image.'),
      emotions: z.array(z.string()).describe('A list of emotions evoked by the image.'),
    }),
  },
  prompt: `You are an AI vision expert. Analyze the image at the given URL and identify the key objects, scenes, and emotions evoked by the image.

Image URL: {{media url=photoUrl}}

Respond with a JSON object containing three keys: objects, scenes, and emotions. Each key should be a list of strings.`,
});

const analyzeImageFlow = ai.defineFlow<
  typeof AnalyzeImageInputSchema,
  typeof AnalyzeImageOutputSchema
>({
  name: 'analyzeImageFlow',
  inputSchema: AnalyzeImageInputSchema,
  outputSchema: AnalyzeImageOutputSchema,
}, async input => {
  try {
    const {output} = await analyzeImagePrompt(input);
    return output!;
  } catch (error) {
    console.error('Error in analyzeImageFlow:', error);
    throw error; // Re-throw the error to be caught by the caller
  }
});
